@page "/devicemonitor"
@using Microsoft.AspNetCore.SignalR.Client
@using System.IO
@using Rakor.Blazor.ECharts.Component
@using Rakor.Blazor.ECharts.Option
@using Rakor.Blazor.ECharts.Option.Enum
@using Rakor.Blazor.ECharts.Option.Series.Line
@using Rakor.Blazor.ECharts.Option.Series.Bar
@using Rakor.Blazor.ECharts.Option.Series

@inject NavigationManager NavigationManager
@inject IConfiguration Configuration

<h3>Device Monitor</h3>

<div class="chartcontainer" style="height:40vh;">
    <ECLine Option="@Option1" Class="chart-fill" @ref="line1"></ECLine>
</div>

<div class="form-group">
    <label>
        Device ID:
        <input @bind="deviceId" />
    </label>
</div>
<div class="form-group">
    <label>
        Signal Value:
        <input @bind="deviceSignal" size="50" />
    </label>
</div>
<button @onclick="Send" disabled="@(!IsConnected)">Send</button>
<div style="height:200px;overflow:scroll">
    <ul id="messagesList">
        @foreach (var message in messages)
        {
            <li>@message</li>
        }
    </ul>
</div>
@code {
    private HubConnection hubConnection;
    private List<double> data = new List<double>();
    private string deviceId;
    private double deviceSignal;
    private List<string> messages = new List<string>();

    private EChartsOption<Line> Option1;
    private EChartsOption<Bar> Option2;
    private ECLine line1;

    protected override async Task OnInitializedAsync()
    {
        //await base.OnInitializedAsync();
        hubConnection = new HubConnectionBuilder()
        //.WithUrl(NavigationManager.ToAbsoluteUri("/deviceHub"))
        .WithUrl(Configuration["DeviceHubUrl"] ?? "https://localhost:5001")
        .Build();

        hubConnection.On<string, double>("ReceiveMessage", async (id, value) =>
        {
            var encodedMsg = $"{id}: {value}";
            messages.Add(encodedMsg);
            data.Add(value);

            Option1.XAxis[0].Data = Enumerable.Range(1, data.Count);
            (Option1.Series[0] as Line).Data = data;
            await line1.SetupOptionAsync(Option1);

            StateHasChanged();
        });

        hubConnection.On<string, double[]>("ReceiveSpike", async (spikeList, valueList) =>
        {

            Option1.XAxis[0].Data = Enumerable.Range(1, valueList.Length);
            (Option1.Series[0] as Line).Data = valueList;
            await line1.SetupOptionAsync(Option1);

            StateHasChanged();
        });


        InitOption();
        await hubConnection.StartAsync();


    }

    private void InitOption()
    {
        Option1 = new EChartsOption<Line>()
        {
            Title = new Title() { Text = "未来一周气温变化", Subtext = "By distribution" },
            Tooltip = new Tooltip() { Trigger = TooltipTrigger.Axis },
            Legend = new Legend() { Data = new[] { "Device Data" } },
            Toolbox = new Toolbox()
            {
                Show = true,
                Feature = new Feature()
                {
                    DataZoom = new FeatureDataZoom() { YAxisIndex = "none" },
                    Restore = new Restore(),
                    SaveAsImage = new SaveAsImage(),
                    DataView = new DataView() { ReadOnly = false },
                    MagicType = new MagicType() { Type = new List<MagicTypeType>() { MagicTypeType.Line, MagicTypeType.Bar, MagicTypeType.Stack, MagicTypeType.Tiled } }
                }
            },
            XAxis = new List<XAxis>()
        {
                new XAxis(){
                    Type=AxisType.Category
                    ,BoundaryGap=false
                    ,Data=new []{"周一","周二","周三","周四","周五","周六","周日" }
                }
            },
            YAxis = new List<YAxis>()
        {
                new YAxis(){Type=AxisType.Value,AxisLabel=new AxisLabel(){Formatter="{value} °C" } }
            },
            Series = new List<object>()
        {
                new Line()
                {
                    Name="Device Data",
                    Data=new []{ 11, 11, 15, 13, 12, 13, 10},
                    MarkLine=new MarkLine(){Data=new List<object> (){ new MarkLineData() {Name="平均值",Type=Sampling.Average } } },
                    MarkPoint=new MarkPoint()
                    {
                        Data=new List<MarkPointData>()
                    {
                            new MarkPointData(){Name="最大值",Type=MarkPointDataType.Max },
                            new MarkPointData(){Name="最小值",Type=MarkPointDataType.Min }
                        }
                    }
                }
            }
        };
    }

    Task Send() =>
        hubConnection.SendAsync("SendMessage", deviceId, deviceSignal);

    public bool IsConnected => hubConnection.State == HubConnectionState.Connected;
}
